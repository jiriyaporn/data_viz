{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled22.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyO+54bKv52Cn9JyfKvnh1RY",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/jiriyaporn/data_viz/blob/main/Project%202564\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "h0o7N7tbXLk7"
      },
      "source": [
        "import pandas as pd"
      ],
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WNPxS0A66Ayj",
        "outputId": "2d0e1829-9df8-4ce7-9c28-c05c08887c7c",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tFqfuGG36BlC"
      },
      "source": [
        "import os "
      ],
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BM55ahl36CD7"
      },
      "source": [
        "path = '/content/drive/My Drive/Project64'"
      ],
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "oN5SWSrQ6Cd7",
        "outputId": "f8c53625-1abb-4071-f6a0-22b16977ac85",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "oil = os.path.join(path, 'oil.xlsx')\n",
        "print(oil)"
      ],
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "/content/drive/My Drive/Project64/oil.xlsx\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2nFspwcW6BU6",
        "outputId": "d37c57c6-c37a-4757-baf0-87a57ab36d80",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "dataoil = pd.read_excel(oil)\n",
        "print( dataoil)"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "      time  Gasohol E85  Gasohol E20  Gasohol  91  Gasohol  95\n",
            "0        1        25.19        27.43        27.70        12.60\n",
            "1        2        25.19        27.43        27.70        12.60\n",
            "2        3        25.19        27.43        27.70        12.60\n",
            "3        4        25.19        27.43        27.70        12.60\n",
            "4        5        25.19        27.43        27.70        12.60\n",
            "...    ...          ...          ...          ...          ...\n",
            "1731  1732        24.04        30.44        31.68        31.95\n",
            "1732  1733        24.44        31.04        32.28        32.55\n",
            "1733  1734        24.44        31.04        32.28        32.55\n",
            "1734  1735        24.44        31.04        32.28        32.55\n",
            "1735  1736        24.44        31.04        32.28        32.55\n",
            "\n",
            "[1736 rows x 5 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5jRlwmw26Avk",
        "outputId": "1fbfca80-5896-4baa-ce30-03ceb98de449",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "gasohol1 = dataoil['Gasohol E85']\n",
        "print(gasohol1)"
      ],
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0       25.19\n",
            "1       25.19\n",
            "2       25.19\n",
            "3       25.19\n",
            "4       25.19\n",
            "        ...  \n",
            "1731    24.04\n",
            "1732    24.44\n",
            "1733    24.44\n",
            "1734    24.44\n",
            "1735    24.44\n",
            "Name: Gasohol E85, Length: 1736, dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZnTD2Lfm86WC",
        "outputId": "6131188b-d6ab-420c-dcfa-6c727a31c032",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "pip install hurst"
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting hurst\n",
            "  Downloading hurst-0.0.5-py3-none-any.whl (5.9 kB)\n",
            "Requirement already satisfied: numpy>=1.10 in /usr/local/lib/python3.7/dist-packages (from hurst) (1.19.5)\n",
            "Requirement already satisfied: pandas>=0.18 in /usr/local/lib/python3.7/dist-packages (from hurst) (1.1.5)\n",
            "Requirement already satisfied: python-dateutil>=2.7.3 in /usr/local/lib/python3.7/dist-packages (from pandas>=0.18->hurst) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2017.2 in /usr/local/lib/python3.7/dist-packages (from pandas>=0.18->hurst) (2018.9)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil>=2.7.3->pandas>=0.18->hurst) (1.15.0)\n",
            "Installing collected packages: hurst\n",
            "Successfully installed hurst-0.0.5\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "h1bXV19a6Apa"
      },
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from hurst import compute_Hc, random_walk"
      ],
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Qmfss1DO6AgT"
      },
      "source": [
        "np.random.seed(1736)\n",
        "random_changes = 1. + np.random.randn(99999) / 1000.\n",
        "series = np.cumprod(random_changes)  # create a random walk from random changes"
      ],
      "execution_count": 18,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-0sYIs0CXLgX"
      },
      "source": [
        "H, c, gasohol1 = compute_Hc(series, kind='price', simplified=True)"
      ],
      "execution_count": 21,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qzcDV3zyXLfR",
        "outputId": "e741fb8f-6251-4be1-de08-c533b18c5430",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 301
        }
      },
      "source": [
        "f, ax = plt.subplots()\n",
        "ax.plot(data[0], c*data[0]**H, color=\"deepskyblue\")\n",
        "ax.scatter(data[0], data[1], color=\"purple\")\n",
        "ax.set_xscale('log')\n",
        "ax.set_yscale('log')\n",
        "ax.set_xlabel('Time interval')\n",
        "ax.set_ylabel('R/S ratio')\n",
        "ax.grid(True)\n",
        "plt.show()\n",
        "\n",
        "print(\"H={:.4f}, c={:.4f}\".format(H,c))"
      ],
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "H=0.5264, c=1.3049\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pVAfclmYDXS4"
      },
      "source": [
        "brownian = random_walk(99999, proba=0.5)\n"
      ],
      "execution_count": 27,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NeWCgTjAXLau"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "DZwF2NqgXLZp"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lzv1rgccXLVc"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "L11Juje3XLTu"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4g_wdhLeXLPo"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "InNE5FW5XLNy"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gWvIDJPEwjIQ"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}